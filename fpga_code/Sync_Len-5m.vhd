-- WARNING: Do NOT edit the input and output ports in this file in a text
-- editor if you plan to continue editing the block that represents it in
-- the Block Editor! File corruption is VERY likely to occur.

-- Copyright (C) 1991-2005 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic       
-- functions, and any output files any of the foregoing           
-- (including device programming or simulation files), and any    
-- associated documentation or information are expressly subject  
-- to the terms and conditions of the Altera Program License      
-- Subscription Agreement, Altera MegaCore Function License       
-- Agreement, or other applicable license agreement, including,   
-- without limitation, that your use is for the sole purpose of   
-- programming logic devices manufactured by Altera and sold by   
-- Altera or its authorized distributors.  Please refer to the    
-- applicable agreement for further details.


-- Generated by Quartus II Version 5.0 (Build Build 168 06/22/2005)
-- Created on Wed Aug 31 13:20:23 2005

LIBRARY ieee;
USE ieee.std_logic_1164.all;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

--****************** UNUSED OBSOLETE CODE!***************************
--  Entity Declaration

ENTITY Sync_Len IS
	GENERIC (	-- Initial SL Value on Reset, comment out all but 1 of the following
--			SL_CNT      : STD_LOGIC_VECTOR := X"00000"	-- 00
			SL_CNT      : STD_LOGIC_VECTOR := X"00A40"	-- = NR 41, RL 64, = SL 2624; default for SC2
--			SL_CNT      : STD_LOGIC_VECTOR := X"00063"	-- = 100
			);


	-- {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
	PORT
	(
		Reset 		: IN STD_LOGIC;	-- active low input
		Enable 		: IN STD_LOGIC;	-- active high input
		ClkSP 		: IN STD_LOGIC;
		Clk25M 		: IN STD_LOGIC;
		SL_Load 	: IN STD_LOGIC;	-- active high input
		CmdData 	: IN STD_LOGIC_VECTOR(31 downto 0);
		isAddr_Zero : OUT STD_LOGIC	-- active low output
		);
	-- {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!
	
END Sync_Len ;

--  Architecture Body

ARCHITECTURE V_P1a OF Sync_Len IS

	signal SL_LoadReg	: STD_LOGIC_VECTOR(19 DOWNTO 0);  -- preset input of counter.
	signal SLCntr		: STD_LOGIC_VECTOR(19 DOWNTO 0); 
	signal s_AZero 		: STD_LOGIC;
	signal r_AZero 		: STD_LOGIC;
	signal rr_AZero 	: STD_LOGIC;
	
BEGIN
	
-------------------------------------------------------
-- 
loadit: process (Reset, Enable, Clk25M) 
	begin
	if  (Reset = '0' ) then
		SL_LoadReg 	<= SL_CNT; 	
	elsif (rising_edge(Clk25M) AND (Enable = '0')) then
		if (SL_Load = '1') then 
			SL_LoadReg <= CmdData(19 downto 0);
		else 
			SL_LoadReg <= SL_LoadReg; 
		end if;
	end if;
end process loadit;
		
-------------------------------------------------------
-- 
dwncnt: process (Reset, ClkSP, Enable) 
	begin
	if  (Reset = '0' ) then
		SLCntr 		<= X"00000";
		s_AZero <= '1';	
	elsif (rising_edge(ClkSP)) then	
		if (Enable = '1' AND SL_LoadReg /= X"00000") then 
			if (SLCntr = X"00000" ) then
				s_AZero <= '0';
				SLCntr <= SL_LoadReg; 
			else
				s_AZero <= '1';
				SLCntr <= SLCntr - 1; 
			end if; 
		end if; 
	end if;	
end process dwncnt;

-------------------------------------------------------
-- buffer and edge-detect for DV-RTS
--
edgit: process(Reset, Clk25M )
BEGIN
	if (Reset = '0' )then 
		r_AZero <= '1';
	elsif (rising_edge(Clk25M)) then 
		r_AZero  <= s_AZero;			-- register RTS_DV signal 
		rr_AZero <= r_AZero;		 
	end if;	
END process edgit;

--isAddr_Zero <= NOT(r_AZero AND NOT rr_AZero);	-- use rising edge of s_AZero
isAddr_Zero <= NOT(NOT r_AZero AND rr_AZero);	-- use falling edge of s_AZero

	
END V_P1a;